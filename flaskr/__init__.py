import osfrom flask import (    Flask, request)from flask_cors import CORSfrom flask_qrcode import QRcodefrom flask_socketio import (    SocketIO, emit)from instance.config import DevelopmentConfigLocalHost_app = None_qrcode = None_socketio = Nonedef create_app():    app = Flask(__name__, instance_relative_config=True)    app.config.from_object(DevelopmentConfigLocalHost())    global _qrcode    global _socketio    _socketio = socketio = SocketIO(app, cors_allowed_origins="*")    _qrcode = QRcode(app)    CORS(app, resources={        r'/document/*': {'origins': '*'},        r'/*': {'origins': '*'},    })    try:        os.mkdir(app.instance_path)    except OSError:        pass    @app.route('/')    def index():        return f'<h1>Hi! You are accessing my root! <a href="https://github.com/KnackHops/Document_API">Here is the link for the api!</a> <h1>'    from flaskr import document    from flaskr import user    for compo in [document, user]:        app.register_blueprint(compo.bp)    @app.after_request    def after_request_func(response):        if not request.path == "/":            response.headers['Content-Type'] = 'application/json'        return response    @socketio.on('connect')    def handle_connection():        print('AYE!')    @socketio.on('message')    def handle_mesage(str):        print(str)    @socketio.event    def hello(str):        print(str)    return app, socketio# def sendMessTest():#     email_add = os.environ.get('EMAIL_USER')#     email_pass = os.environ.get('EMAIL_PASSWORD')##     with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:#         smtp.login(email_add, email_pass)##         subj = "hey there delilah"#         body = "what it's like in new york city?"##         msg = f'Subject: {subj}\n\n{body}'#         smtp.sendmail(email_add, email_add, msg)# _app = create_app()# if __name__ == '__main__':#     # port = int(os.environ.get('PORT', 5000))#     # _app.run(host='0.0.0.0', port=port)#     _app.run(debug=True)#     # _socketio.run(_app, debug=True)