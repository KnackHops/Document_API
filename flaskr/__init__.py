import osfrom functools import wrapsfrom flask import Flaskfrom flask import requestfrom flask_cors import CORSfrom flask_qrcode import QRcodefrom flask_socketio import SocketIO# from flask_sqlalchemy import SQLAlchemyfrom instance.config import DevelopmentConfigLocalHost_app = None_qrcode = None_socketio = None_celery = None# _sq = Nonedef create_app():    global _qrcode    global _socketio    global _sq    app = Flask(__name__, instance_relative_config=True)    # _sq = SQLAlchemy(app)    create_folders(app)    app.config.from_object(DevelopmentConfigLocalHost())    _socketio = socketio = SocketIO(app, cors_allowed_origins="*")    _qrcode = QRcode(app)    CORS(app, resources={        r'/document/*': {'origins': '*'},        r'/*': {'origins': '*'},    })    @app.after_request    def after_request_func(response):        if not request.path == "/" and not request.path == '/link-verify/':            response.headers['Content-Type'] = 'application/json'        return response    from flaskr import document    from flaskr import user    from flaskr import socket_events    for compo in [document, user, socket_events]:        app.register_blueprint(compo.bp)    return app, socketiodef create_folders(app):    try:        os.mkdir(app.instance_path)    except OSError:        pass    try:        os.mkdir('tmp')    except OSError:        passdef valid_wrapper(func):    @wraps(func)    def inside(*args, **kwargs):        if not request.path == "/":            if len(request.args) > 0:                data = request.args.to_dict()            elif request.json:                data = request.json            else:                return {'error': 'no data'}, 400            check_return = validity_check(data)            if check_return:                return check_return        return func(*args, **kwargs)    return insidedef validity_check(list_req):    for key in list_req:        val = list_req[key]        if not val and not val == 0:            return {'error': f'{key} is empty'}, 400    return None# def sendMessTest():#     email_add = os.environ.get('EMAIL_USER')#     email_pass = os.environ.get('EMAIL_PASSWORD')##     with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:#         smtp.login(email_add, email_pass)##         subj = "hey there delilah"#         body = "what it's like in new york city?"##         msg = f'Subject: {subj}\n\n{body}'#         smtp.sendmail(email_add, email_add, msg)# _app = create_app()# if __name__ == '__main__':#     # port = int(os.environ.get('PORT', 5000))#     # _app.run(host='0.0.0.0', port=port)#     _app.run(debug=True)#     # _socketio.run(_app, debug=True)